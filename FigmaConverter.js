
const axios = require('axios');
const { parseStringPromise } = require('xml2js');
const chalk = require('chalk');

const PROPERTY_MAP = {
  'BackgroundColor3': { type: 'Color3', prefix: 'Color3.new' },
  'TextColor3': { type: 'Color3', prefix: 'Color3.new' },
  'Size': { type: 'UDim2', prefix: 'UDim2.new' },
  'Position': { type: 'UDim2', prefix: 'UDim2.new' },
  'FontFace': { type: 'Font', processor: (val) => `Font.fromName("${val.Family[0].url[0].split('/').pop().replace('.json','')}")` },
  'CornerRadius': { type: 'UDim', prefix: 'UDim.new' }
};

async function parseFigmaToRoblox(url) {
  try {
    const { data: xml } = await axios.get(url);
    const { roblox } = await parseStringPromise(xml);
    
    let luaCode = `-- Generated by Figma2Roblox Advanced\nlocal ScreenGui = Instance.new("ScreenGui")\n`;
    luaCode += `ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")\n\n`;

    const processElement = (element, depth = 0) => {
      const className = element.$.class;
      const varName = `${className}_${Math.random().toString(36).substr(2, 5)}`;
      
      // Property Handling
      let propsCode = '';
      element.Properties?.forEach(propGroup => {
        for (const [key, value] of Object.entries(propGroup)) {
          if(key === '$') continue;
          const processor = PROPERTY_MAP[key] || { type: 'raw' };
          let processedValue = value[0];

          switch(processor.type) {
            case 'Color3':
              processedValue = `${processor.prefix}(${value[0].R}, ${value[0].G}, ${value[0].B})`;
              break;
            case 'UDim2':
              const [XS, XO, YS, YO] = value[0].match(/[0-9.]+/g);
              processedValue = `${processor.prefix}(${XS}, ${XO}, ${YS}, ${YO})`;
              break;
            case 'Font':
              processedValue = processor.processor(value[0]);
              break;
          }
          
          propsCode += `${varName}.${key} = ${processedValue}\n`;
        }
      });

      // Children
      let childrenCode = '';
      element.Item?.forEach(child => {
        childrenCode += processElement(child, depth + 1);
      });

      return `
-- Depth: ${depth}
local ${varName} = Instance.new("${className}")
${varName}.Parent = ${depth === 0 ? 'ScreenGui' : 'parent'}
${propsCode}
${childrenCode}
`;
    };

    roblox.Item.forEach(item => {
      luaCode += processElement(item);
    });

    return luaCode;
  } catch (error) {
    console.error(chalk.red('Converter Error:'), error);
    throw new Error('XML parse hatası - Figma dosyası geçersiz');
  }
}

module.exports = { parseFigmaToRoblox };
